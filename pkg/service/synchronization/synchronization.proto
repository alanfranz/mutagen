syntax = "proto3";

package synchronization;

option go_package = "github.com/mutagen-io/mutagen/pkg/service/synchronization";

import "selection/selection.proto";
import "synchronization/configuration.proto";
import "synchronization/state.proto";
import "url/url.proto";

// CreationSpecification contains the metadata required for a new session.
message CreationSpecification {
    // Alpha is the alpha endpoint URL for the session.
    url.URL alpha = 1;
    // Beta is the beta endpoint URL for the session.
    url.URL beta = 2;
    // Configuration is the base session configuration. It is the result of
    // merging the global configuration (unless disabled), any manually
    // specified configuration file, and any command line configuration
    // parameters.
    synchronization.Configuration configuration = 3;
    // ConfigurationAlpha is the alpha-specific session configuration. It is
    // determined based on command line configuration parameters.
    synchronization.Configuration configurationAlpha = 4;
    // ConfigurationBeta is the beta-specific session configuration. It is
    // determined based on command line configuration parameters.
    synchronization.Configuration configurationBeta = 5;
    // Name is the name for the session object.
    string name = 6;
    // Labels are the labels for the session object.
    map<string, string> labels = 7;
    // Paused indicates whether or not to create the session pre-paused.
    bool paused = 8;
}

// CreateRequest encodes a request for session creation.
message CreateRequest {
    // Prompter is the prompter identifier to use for creating sessions.
    string prompter = 1;
    // Specification is the creation specification.
    CreationSpecification specification = 2;
}

// CreateResponse encodes a session creation response.
message CreateResponse {
    // Session is the resulting session identifier.
    string session = 1;
}

// ListRequest encodes a request for session metadata.
message ListRequest {
    // Selection is the session selection criteria.
    selection.Selection selection = 1;
    // PreviousStateIndex is the previously seen state index. 0 may be provided
    // to force an immediate state listing.
    uint64 previousStateIndex = 2;
}

// ListResponse encodes session metadata.
message ListResponse {
    // StateIndex is the state index associated with the session metadata.
    uint64 stateIndex = 1;
    // SessionStates are the session metadata states.
    repeated synchronization.State sessionStates = 2;
}

// FlushRequest encodes a request to flush sessions.
message FlushRequest {
    // Prompter is the prompter to use for status message updates.
    string prompter = 1;
    // Selection is the session selection criteria.
    selection.Selection selection = 2;
    // SkipWait indicates whether or not the operation should avoid blocking.
    bool skipWait = 3;
}

// FlushResponse indicates completion of flush operation(s).
message FlushResponse{}

// PauseRequest encodes a request to pause sessions.
message PauseRequest {
    // Prompter is the prompter to use for status message updates.
    string prompter = 1;
    // Selection is the session selection criteria.
    selection.Selection selection = 2;
}

// PauseResponse indicates completion of pause operation(s).
message PauseResponse{}

// ResumeRequest encodes a request to resume sessions.
message ResumeRequest {
    // Prompter is the prompter identifier to use for resuming sessions.
    string prompter = 1;
    // Selection is the session selection criteria.
    selection.Selection selection = 2;
}

// ResumeResponse indicates completion of resume operation(s).
message ResumeResponse{}

// ResetRequest encodes a request to reset sessions.
message ResetRequest {
    // Prompter is the prompter identifier to use for resetting sessions.
    string prompter = 1;
    // Selection is the session selection criteria.
    selection.Selection selection = 2;
}

// ResetResponse indicates completion of reset operation(s).
message ResetResponse{}

// TerminateRequest encodes a request to terminate sessions.
message TerminateRequest {
    // Prompter is the prompter to use for status message updates.
    string prompter = 1;
    // Selection is the session selection criteria.
    selection.Selection selection = 2;
}

// TerminateResponse indicates completion of termination operation(s).
message TerminateResponse{}

// ResolveConflictsRequest encodes a request to resolve conflicts in a session.
message ResolveConflictsRequest {
    // Selection is the session selection criteria.
    selection.Selection selection = 1;
    // FavorAlpha indicates whether to resolve conflicts in favor of the alpha side.
    bool favorAlpha = 2;
}

// ResolveConflictsResponse indicates completion of conflict resolution operation(s).
message ResolveConflictsResponse{}

// Synchronization manages the lifecycle of synchronization sessions.
service Synchronization {
    // Create creates a new session.
    rpc Create(CreateRequest) returns (CreateResponse) {}
    // List returns metadata for existing sessions.
    rpc List(ListRequest) returns (ListResponse) {}
    // Flush flushes sessions.
    rpc Flush(FlushRequest) returns (FlushResponse) {}
    // Pause pauses sessions.
    rpc Pause(PauseRequest) returns (PauseResponse) {}
    // Resume resumes paused or disconnected sessions.
    rpc Resume(ResumeRequest) returns (ResumeResponse) {}
    // Reset resets sessions' histories.
    rpc Reset(ResetRequest) returns (ResetResponse) {}
    // Terminate terminates sessions.
    rpc Terminate(TerminateRequest) returns (TerminateResponse) {}

    // ResolveConflicts resolves conflicts in a session.
    rpc ResolveConflicts(ResolveConflictsRequest) returns (ResolveConflictsResponse) {}
}
